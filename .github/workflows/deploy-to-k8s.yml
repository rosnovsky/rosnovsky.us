name: CI/CD Workflow

on:
  pull_request:
    branches:
      - '*'
    paths-ignore:
      - '.github/**'
      - '.vscode/**'
      - '.astro/**'
      - '.gitignore'
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
      - '.vscode/**'
      - '.astro/**'
      - '.gitignore'

jobs:
  build_and_publish:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Set Image Tag
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ] || [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "tag=dev" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=$(echo $GITHUB_SHA | cut -c1-7)"
          fi

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Publish Docker Image
        run: |
          export COMMIT_SHA=${{ github.sha }}
          docker build \
          --build-arg COMMIT_SHA=${{ github.sha }} \
          --build-arg GITHUB_ACTION_BUILD=true \
          -t ghcr.io/${{ github.repository }}:${{ steps.set_tag.outputs.tag }} .
          docker push ghcr.io/${{ github.repository }}:${{ steps.set_tag.outputs.tag }}

  deploy:
    name: Deploy to Kubernetes
    needs: build_and_publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    env:
      KUBECONFIG: ${{ secrets.KUBECONFIG }}
    steps:
      - name: Setup kubectl
        run: |
          KUBECTL_VERSION=$(curl --silent "https://storage.googleapis.com/kubernetes-release/release/stable.txt")
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/

      - name: Determine Environment
        id: set_env
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "environment=dev" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_ENV
          else
            echo "environment=staging" >> $GITHUB_ENV
          fi

      - name: Create GitHub Deployment
        id: create_deployment
        run: |
          echo "Deployment environment: $environment"
          DEPLOYMENT_RESPONSE=$(curl \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments \
            -d "{\"ref\": \"${{ github.sha }}\", \"environment\": \"Cluster - $environment\", \"required_contexts\": [], \"description\": \"Deploying to Kubernetes\"}")
          echo DEPLOYMENT_ID=$(echo $DEPLOYMENT_RESPONSE | jq '.id') >> $GITHUB_ENV


      - name: Deploy to Kubernetes
        run: |
          echo "$KUBECONFIG" > ./kubeconfig.yaml
          context="hostinger"
          namespace="web"
          deployment_name="rosnovskyus-deployment"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Logic for dev deployment
            kubectl config use-context $context -n $namespace --kubeconfig ./kubeconfig.yaml
            kubectl rollout restart deployment/$deployment_name-dev -n $namespace --kubeconfig ./kubeconfig.yaml
          else
            # Logic for prod deployment
            kubectl config use-context $context -n $namespace --kubeconfig ./kubeconfig.yaml
            kubectl rollout restart deployment/$deployment_name -n $namespace --kubeconfig ./kubeconfig.yaml
          fi

      - name: Update GitHub Deployment Status
        if: always()
        run: |
          DEPLOYMENT_STATUS="success"
          if [ ${{ job.status }} != 'success' ]; then
            DEPLOYMENT_STATUS="failure"
          fi
          curl \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments/${{ env.DEPLOYMENT_ID }}/statuses \
            -d "{\"state\": \"$DEPLOYMENT_STATUS\"}"
